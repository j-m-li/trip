
# comment

include "../lib/std.3p"
include "spec1.3p"

define MY_CONST 3 		# defs

array array_of_integer { 	# global
	1, 2, 3, 4
}
bytes array_of_bytes {
	65,66,67,68,69,0
}


class my_struct {
field one
field next
field three
field four

# args[0]: this
method init () {
	set one 1
	set next null
	set three 3
	set four "four!"
}

# args[0]: this
method dispose () {
	delete this
}

method print_this () {
	print10 this
}

# args[0]: this
# args[1]: increment value
method do_something (inc) {
	var s;
	set next next + inc
	print "=0A";
	print10 next
	print "=0A";
	this.print_this

	set s {file_size "README.md"}
	print "=0A";
	print10 s
	print "=0A";
	print10 {file_size "README.md"}
	print "=0A";
	print four
	print " "
	print10 {str_cmp four "four! "}
	print "=0A";
	print {file_load "README.md" 0 {file_size "README.md"}}
	file_save "bin/test.txt" 0 5 "hello"
	file_save "bin/test.txt" 7 1 "!"

	set s {str_dup "Yo!"}
	print s
	delete s
	print array_of_bytes
	print10 array_of_integer[1]
	print "BBBBBB=0A";
	print_hi
	print "--------BBBBBB=0A";

	return one
}

method call_hello() {
	print "This should be 0: "
	print10 this
	print "=0A"
	hello_world
}

} # end of class my_struct


# args[0]: command line argument count
# args[1]: array of string of each arguments
func startup (argc, argv) {
	var x, str, a, b, f
	ref my_struct s

	print argv[0]
	print argv[1]

	set x MY_CONST

	set str "A string litteral =
YO=0A =
multi-line=0A"

	set a {new array 10} # alloc an array of 10 words
	set b {new bytes 3} # alloc 3 bytes
 
	set s {new my_struct} # alloc a class
	s.init

	print str

	set a[x] 25
	set a[0] a[x]
	set a[1] 1 + 2 - 3
	set a[1] 1 + 2 - (-3 * 4) / 5 % 6

	poke b 0 'A' 			# ascii 'A'
	poke b 1 ({peek b 0} + 2) 	# ascii 'C'
	poke b 2 0			# nil: end of string
	print b     			# print AC

	print "BOB=0A"
	hello_world
	print "TOB=0A"
	set f s.call_hello 	# we can only assign methods to variables, not functions
	print "__________________ JHGJHGGJH=0A"
	f 			# indirect call of method with NULL "this"
	print "JHGJHGGJH=0A"

	print10 {ret_ten} # call the ret_ten function and print the returned value

	if x - 5 ?
		> {print "x greater than 5"},
		< {print "x less than 5"},
		~ {print "x equal 5"};

	print "=0A"
	if x ?
		1 {print "x =3D 1"},
		2 {print "x =3D 2"},
		-20 {print "x =3D -20"},
		'A' {print "x =3D A"},
		<> {print "x not equal zero"},
		>~ {print "x greater or equal zero"},
		<~ {print "x less than or equal zero"}
	;
	print "=0A"
	while x ? > { 	# loop while x greater than 0
		print10 x
		if x - 2 ? <~ continue; # skip and loop if x is less than 3
		if x - 4 ? < break;	# stop loop if x is less than 4
		print "=0A"
		set x x - 1
	};

	s.do_something 7
	s.dispose

	print "=0A program "
	print argv[0]
	print " is terminated=0A"

	return 0
}


func hello_world () {
	print "Hello World!=0A"
}

func ret_ten () {
	return 10
}


